# name: GitHub Pages

# on:
#   push:
#     branches:
#     - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Setup Node.js
#       uses: actions/setup-node@v2
#       with:
#         node-version: '16'

#     - name: Install dependencies
#       run: npm install

#     - name: Run tests
#       run: npm run test:headless

#     - name: Build
#       run: npm run build:prod

#     - name: Deploy
#       if: success()
#       uses: peaceiris/actions-gh-pages@v3
#       with:
#         deploy_key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
#         publish_dir: dist/testcode
#         enable_jekyll: true

name: Prepare Release and Merge

on:
  push:
    branches:
      - v*

jobs:
  prepare-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Check commit message and run tests
        run: |
          if [[ $(git log --format=%B -n 1 ${{ github.sha }}) =~ ^\[prepare-release\ v([0-9]+\.[0-9]+\.[0-9]+-rc)\]$ ]]; then
            echo "Valid commit message format"
            # Rest of your code here
          else
            echo "Invalid commit message format"
            exit 1
          fi

      # - name: Check commit message and run tests
      #   run: |
      #       commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
      #       if echo "$commit_message" | jq -e '.[0] | contains("[prepare-release v")' > /dev/null; then
      #         version=$(echo "$commit_message" | jq -r 'match("\\[prepare-release v([0-9]+\\.[0-9]+\\.[0-9]+-rc)\\]") | .captures[0].string')
      #         if [ -n "$version" ]; then
      #           echo "Valid commit message format"
      #           npm test
      #         else
      #           echo "Invalid version string format"
      #           exit 1
      #         fi
      #       else
      #         echo "Invalid commit message format"
      #         exit 1
      #       fi
        
      # - name: Create tag from commit message
      #   id: extract_version
      #   run: echo "::set-output name=version::${BASH_REMATCH[1]}"

      - name: Create tag
        id: create_tag
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $commit_message =~ \[prepare-release\ v([0-9]+\.[0-9]+\.[0-9]+-rc)\] ]]; then
            version=${BASH_REMATCH[1]}
            git tag -a "$version" -m "Version $version"
            git push origin "$version"  # Push the created tag
          else
            echo "Invalid commit message format"
            exit 1
          fi


  merge-to-main:
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Merge to main
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git fetch origin
          git checkout main
          git merge --no-ff --allow-unrelated-histories ${{ github.ref }}
          git push origin main